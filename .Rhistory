n = 2000 # fixed
q1_pd <- data.frame(q = c(31, 27, 23, 19, 15, 11, 7),
time = c(0.001437, 0.001494, 0.001205, 0.001305, 0.001250,
0.001226, 0.000832))
ggplot(q1_pd, aes(x = q, y = time)) + geom_point() +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N = ", n, " (fixed), q varied (7 values from 7 to 31)"))
# Question 4
q4 <- data.frame(n = c(10, 30, 50, 100, 300, 500, 1000, 3000, 5000, 10000,
30000, 50000, 75000, 100000, 125000, 150000, 175000, 200000),
val = c(0.40000000, 1.73333333, 2.64000000, 2.64000000,
2.93333333, 3.04000000, 3.09200000, 3.10933333,
3.18240000, 3.18080000, 3.14586667, 3.14568000,
3.14192000, 3.14780000, 3.14732800, 3.14069333,
3.14052571, 3.14112000),
time = c(0.007238, 0.010000, 0.007200, 0.008974,
0.015805, 0.009011, 0.009501, 0.015453,
0.022269, 0.032608, 0.064775, 0.105450,
0.128504, 0.175335, 0.203483, 0.285345,
0.265365, 0.322050))
ggplot(q4, aes(x = n, y = time)) + geom_point(aes(color = val)) +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N = ", n, " (fixed), q varied (7 values from 7 to 31)"))
# Question 4
pi_approx <- c(0.40000000, 1.73333333, 2.64000000, 2.64000000,
2.93333333, 3.04000000, 3.09200000, 3.10933333,
3.18240000, 3.18080000, 3.14586667, 3.14568000,
3.14192000, 3.14780000, 3.14732800, 3.14069333,
3.14052571, 3.14112000)
pi
pi - pi_approx
abs(pi - pi_approx)
# Question 4
pi_approx <- c(0.40000000, 1.73333333, 2.64000000, 2.64000000,
2.93333333, 3.04000000, 3.09200000, 3.10933333,
3.18240000, 3.18080000, 3.14586667, 3.14568000,
3.14192000, 3.14780000, 3.14732800, 3.14069333,
3.14052571, 3.14112000)
q4 <- data.frame(n = c(10, 30, 50, 100, 300, 500, 1000, 3000, 5000, 10000,
30000, 50000, 75000, 100000, 125000, 150000, 175000, 200000),
Absolute_distance_from_pi = abs(pi - pi_approx),
time = c(0.007238, 0.010000, 0.007200, 0.008974,
0.015805, 0.009011, 0.009501, 0.015453,
0.022269, 0.032608, 0.064775, 0.105450,
0.128504, 0.175335, 0.203483, 0.285345,
0.265365, 0.322050))
ggplot(q4, aes(x = n, y = time)) + geom_point(aes(color = Absolute_distance_from_pi)) +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N = ", n, " (fixed), q varied (7 values from 7 to 31)"))
ggplot(q4, aes(x = n, y = time)) + geom_point(aes(color = Absolute_distance_from_pi)) +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N varied (and q = 16 fixed)"))
library(ggplot2)
# Question 1
# part c
q = 7 # fixed
q1_pc <- data.frame(n = c(50000, 20000, 15000, 10000, 7500, 5000, 3000, 1000,
500, 250, 200, 100, 50, 10),
time = c(0.007046, 0.004449, 0.003576, 0.002477, 0.001979,
0.001953, 0.000914, 0.000756, 0.000595, 0.000553,
0.000510, 0.000522, 0.000519, 0.000448))
ggplot(q1_pc, aes(x = n, y = time)) + geom_point() +
xlab("N") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with q = ", q, " (fixed), N varied from 10 to 50000"))
# part d
n = 2000 # fixed
q1_pd <- data.frame(q = c(31, 27, 23, 19, 15, 11, 7),
time = c(0.001437, 0.001494, 0.001205, 0.001305, 0.001250,
0.001226, 0.000832))
ggplot(q1_pd, aes(x = q, y = time)) + geom_point() +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N = ", n, " (fixed), q varied (7 values from 7 to 31)"))
# Question 4
pi_approx <- c(0.40000000, 1.73333333, 2.64000000, 2.64000000,
2.93333333, 3.04000000, 3.09200000, 3.10933333,
3.18240000, 3.18080000, 3.14586667, 3.14568000,
3.14192000, 3.14780000, 3.14732800, 3.14069333,
3.14052571, 3.14112000)
q4 <- data.frame(n = c(10, 30, 50, 100, 300, 500, 1000, 3000, 5000, 10000,
30000, 50000, 75000, 100000, 125000, 150000, 175000, 200000),
Absolute_distance_from_pi = abs(pi - pi_approx),
time = c(0.007238, 0.010000, 0.007200, 0.008974,
0.015805, 0.009011, 0.009501, 0.015453,
0.022269, 0.032608, 0.064775, 0.105450,
0.128504, 0.175335, 0.203483, 0.285345,
0.265365, 0.322050))
ggplot(q4, aes(x = n, y = time)) + geom_point(aes(color = Absolute_distance_from_pi)) +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N varied (and q = 16 fixed)"))
library(ggplot2)
# Question 1
# part c
q = 7 # fixed
q1_pc <- data.frame(n = c(#50000,
20000, 15000, 10000, 7500, 5000, 3000, 1000,
500, 250, 200, 100, 50, 10),
time = c(#0.007046,
0.004449, 0.003576, 0.002477, 0.001979,
0.001953, 0.000914, 0.000756, 0.000595, 0.000553,
0.000510, 0.000522, 0.000519, 0.000448))
ggplot(q1_pc, aes(x = n, y = time)) + geom_point() +
xlab("N") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with q = ", q, " (fixed), N varied from 10 to 50000"))
setwd("../../Documents/MSc courses/7850-APC/ProjectNotes/ahc_project/")
source("result_processing/rfuncs.R")
num_vecs <- 15
file_index <- 3
# ------------------------------------------------------------------------------
# SEQUENTIAL -------------------------------------------------------------------
sfiles <- list.files("outputs/seq/", full.names = TRUE)
snames <- sfiles %>% gsub("outputs/seq/", "", .) %>% gsub(".txt", "", .)
names(sfiles) <- snames
s_outputs <- readLines(sfiles[file_index])
s_ind1 <- which(grepl("Matrix A: ", s_outputs))+1
seq_results <- s_outputs[s_ind1:(s_ind1+(num_vecs-1))]
s_a1 <- initialPairs(seq_results)
s_clustering <- s_outputs[which(grepl("From ", s_outputs))]
s_x1 <- lapply(s_clustering, function(x_i) {
x_i %>% gsub("From ", "", .) %>% gsub(" and ", "\t", .) %>%
gsub(" to ", "\t", .) %>%
strsplit(., "\t") %>% unlist()
})
s_first_pair <- orderedPairFormatting(s_x1, 1) %>% add_column(type = "1")
s_second_pair <- orderedPairFormatting(s_x1, 2) %>% add_column(type = "1")
s_new_center <- orderedPairFormatting(s_x1, 3) %>% add_column(type = "2")
s_toplot <- bind_rows(s_first_pair, s_second_pair) %>% bind_rows(., s_new_center)
s_d1 <- s_toplot[s_toplot$type == 1,] %>% arrange(val) %>%
add_column(new_val = rep(c(0,1), nrow(s_toplot[s_toplot$type == 1,])/2))
s_d2a <- s_d1[s_d1$new_val == 0,c("val","x","y","type")]
s_d2b <- s_d1[s_d1$new_val == 1,c("val","x","y","type")] %>%
set_colnames(c("val","xend","yend","type"))
s_d2 <- inner_join(s_d2a, s_d2b, by = c("val","type"))
s_df <- bind_rows(s_d2, s_d2) %>% bind_rows(s_d2)
s_toplot$type[s_toplot$type == "1"] <- "Merged pair"
s_toplot$type[s_toplot$type == "2"] <- "Center"
# s_plot <- ggplot(data = s_toplot, aes(x = x, y = y, color = type)) + geom_point() +
#   geom_segment(aes(x = s_df$x, y = s_df$y, xend = s_df$xend, yend = s_df$yend)) +
#   ggtitle(paste0("Sequential implementation 1 for ", num_vecs, " vectors and N = 2")) +
#   labs(color = "Point type")
# s_plot
# ggsave(paste0("sequential_plot.png"))
toplot_1 <- as.data.table(s_toplot)[val <= 5]
df_1 <- as.data.table(s_df)[val <= 5]
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Naive sequential implementation for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
toplot_1 <- as.data.table(s_toplot)[val <= 5]
df_1 <- as.data.table(s_df)[val <= 5]
toplot_2 <- as.data.table(s_toplot)
df_2 <- as.data.table(s_df)
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Naive sequential implementation for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_lower_p1m", num_vecs, ".png"))
ggplot(data = toplot_2, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_2$x, y = df_2$y, xend = df_2$xend, yend = df_2$yend)) +
ggtitle(paste0("Naive sequential implementation for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_upper_p1m", num_vecs, ".png"))
source("result_processing/rfuncs.R")
num_vecs <- 15
file_index <- 3
pfiles <- list.files("outputs/parallel/", full.names = TRUE)
pnames <- pfiles %>% gsub("outputs/parallel/", "", .) %>% gsub(".txt", "", .)
names(pfiles) <- pnames
p_outputs <- readLines(pfiles[file_index])
p_ind1 <- which(grepl("Matrix A: ", p_outputs))[1]+1
p_matA <- p_outputs[p_ind1:(p_ind1+(num_vecs-1))]
p_a1 <- lapply(p_matA, function(x) {
strsplit(x, "\t") %>% unlist() %>% as.double()
}) %>% as.data.frame() %>% t() %>% as.data.frame() %>%
as_tibble() %>% set_colnames(c("x", "y"))
# p_lvlinds <- which(grepl("Minimum distance ", p_outputs))
p_pairs <- grep("From ", p_outputs, value = TRUE)
p_clustering <- grep("Minimum distance ", p_outputs, value = TRUE)
# note that the "levels" are decreasing --> max is at the leaves, 1 is at the root
p_levels <- lapply(p_clustering, function(x_i) {
y_i <- strsplit(strsplit(x_i, split = "level ")[[1]][2], ", process ")[[1]] %>% as.double()
data.table(level = y_i[1], proc = y_i[2])
}) %>% bind_rows()
p_pairs
p_pairs[14]
# for m = 10
p_pairs[14] <- gsub("5.00\t3.50", "", p_pairs[14])
p_pairs
df <- lapply(p_pairs, function(x_i) {
y_i <- x_i %>% gsub("From ", "", .) %>% gsub(" and ", "\t", .) %>%
gsub(" to ", "\t", .) %>%
strsplit(., "\t") %>% unlist()
y_i[nchar(y_i) > 0] %>% t() %>% as.data.frame()
}) %>% bind_rows()
p_x2 <- df %>% set_colnames(c("x1", "x2", "center")) %>%
add_column(level = p_levels$level, .before = 1) %>%
add_column(proc = p_levels$proc, .before = 1) %>%
sepCols(3, .) %>% sepCols(4, .) %>% sepCols(5, .) %>% as_tibble() %>% unique() %>%
as.data.table()
p_x1 <- lapply(p_pairs, function(x_i) {
x_i %>% gsub("From ", "", .) %>% gsub(" and ", "\t", .) %>%
gsub(" to ", "\t", .) %>%
strsplit(., "\t") %>% unlist()
})
p_first_pair <- orderedPairFormatting(p_x1, 1) %>% add_column(type = "1")
p_second_pair <- orderedPairFormatting(p_x1, 2) %>% add_column(type = "1")
p_new_center <- orderedPairFormatting(p_x1, 3) %>% add_column(type = "2")
p_toplot <- bind_rows(p_first_pair, p_second_pair) %>% bind_rows(., p_new_center)
p_d1 <- p_toplot[p_toplot$type == 1,] %>% arrange(val) %>%
add_column(new_val = rep(c(0,1), nrow(p_toplot[p_toplot$type == 1,])/2))
p_d2a <- p_d1[p_d1$new_val == 0,c("val","x","y","type")]
p_d2b <- p_d1[p_d1$new_val == 1,c("val","x","y","type")] %>%
set_colnames(c("val","xend","yend","type"))
p_d2 <- inner_join(p_d2a, p_d2b, by = c("val","type"))
p_df <- bind_rows(p_d2, p_d2) %>% bind_rows(p_d2)
p_toplot$type[p_toplot$type == "1"] <- "Merged pair"
p_toplot$type[p_toplot$type == "2"] <- "Center"
toplot_1 <- as.data.table(p_toplot)[val <= 5]
df_1 <- as.data.table(p_df)[val <= 5]
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_1$x), max(toplot_1$x)) +
ylim(min(toplot_1$y), max(toplot_1$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_lower_p6m10.png"))
toplot_2 <- as.data.table(p_toplot)
toplot_1 <- as.data.table(p_toplot)[val <= 5]
df_1 <- as.data.table(p_df)[val <= 5]
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_1$x), max(toplot_1$x)) +
ylim(min(toplot_1$y), max(toplot_1$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_lower_p6m", num_vecs, ".png"))
toplot_2 <- as.data.table(p_toplot)
df_2 <- as.data.table(p_df)
ggplot(data = toplot_2, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_1$x), max(toplot_1$x)) +
ylim(min(toplot_1$y), max(toplot_1$y)) +
geom_segment(aes(x = df_2$x, y = df_2$y, xend = df_2$xend, yend = df_2$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_upper_p6m", num_vecs, ".png"))
source("result_processing/rfuncs.R")
num_vecs <- 25
file_index <- 4
pfiles <- list.files("outputs/parallel/", full.names = TRUE)
pnames <- pfiles %>% gsub("outputs/parallel/", "", .) %>% gsub(".txt", "", .)
names(pfiles) <- pnames
p_outputs <- readLines(pfiles[file_index])
p_ind1 <- which(grepl("Matrix A: ", p_outputs))[1]+1
p_matA <- p_outputs[p_ind1:(p_ind1+(num_vecs-1))]
p_a1 <- lapply(p_matA, function(x) {
strsplit(x, "\t") %>% unlist() %>% as.double()
}) %>% as.data.frame() %>% t() %>% as.data.frame() %>%
as_tibble() %>% set_colnames(c("x", "y"))
# p_lvlinds <- which(grepl("Minimum distance ", p_outputs))
p_pairs <- grep("From ", p_outputs, value = TRUE)
p_clustering <- grep("Minimum distance ", p_outputs, value = TRUE)
# note that the "levels" are decreasing --> max is at the leaves, 1 is at the root
p_levels <- lapply(p_clustering, function(x_i) {
y_i <- strsplit(strsplit(x_i, split = "level ")[[1]][2], ", process ")[[1]] %>% as.double()
data.table(level = y_i[1], proc = y_i[2])
}) %>% bind_rows()
# for m = 10
# p_pairs[4] <- gsub("3.00\t3.00", "", p_pairs[4])
# for m = 10
# p_pairs[14] <- gsub("5.00\t3.50", "", p_pairs[14])
df <- lapply(p_pairs, function(x_i) {
y_i <- x_i %>% gsub("From ", "", .) %>% gsub(" and ", "\t", .) %>%
gsub(" to ", "\t", .) %>%
strsplit(., "\t") %>% unlist()
y_i[nchar(y_i) > 0] %>% t() %>% as.data.frame()
}) %>% bind_rows()
# # for m = 15
# df[7,1] <- df[7,4]
# df[7,2] <- df[7,5]
# df[7,3] <- df[7,6]
# df <- df[,1:3]
p_x2 <- df %>% set_colnames(c("x1", "x2", "center")) %>%
add_column(level = p_levels$level, .before = 1) %>%
add_column(proc = p_levels$proc, .before = 1) %>%
sepCols(3, .) %>% sepCols(4, .) %>% sepCols(5, .) %>% as_tibble() %>% unique() %>%
as.data.table()
p_x1 <- lapply(p_pairs, function(x_i) {
x_i %>% gsub("From ", "", .) %>% gsub(" and ", "\t", .) %>%
gsub(" to ", "\t", .) %>%
strsplit(., "\t") %>% unlist()
})
p_first_pair <- orderedPairFormatting(p_x1, 1) %>% add_column(type = "1")
p_second_pair <- orderedPairFormatting(p_x1, 2) %>% add_column(type = "1")
p_new_center <- orderedPairFormatting(p_x1, 3) %>% add_column(type = "2")
p_toplot <- bind_rows(p_first_pair, p_second_pair) %>% bind_rows(., p_new_center)
p_d1 <- p_toplot[p_toplot$type == 1,] %>% arrange(val) %>%
add_column(new_val = rep(c(0,1), nrow(p_toplot[p_toplot$type == 1,])/2))
p_d2a <- p_d1[p_d1$new_val == 0,c("val","x","y","type")]
p_d2b <- p_d1[p_d1$new_val == 1,c("val","x","y","type")] %>%
set_colnames(c("val","xend","yend","type"))
p_d2 <- inner_join(p_d2a, p_d2b, by = c("val","type"))
p_df <- bind_rows(p_d2, p_d2) %>% bind_rows(p_d2)
p_toplot$type[p_toplot$type == "1"] <- "Merged pair"
p_toplot$type[p_toplot$type == "2"] <- "Center"
# p_plot <-
#   ggplot(data = p_toplot, aes(x = x, y = y, color = type)) + geom_point() +
#   geom_segment(aes(x = p_df$x, y = p_df$y, xend = p_df$xend, yend = p_df$yend)) +
#   ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
#   labs(color = "Point type")
# p_plot
# ggsave(paste0("parallel_plot.png"))
toplot_1 <- as.data.table(p_toplot)[val <= 5]
df_1 <- as.data.table(p_df)[val <= 5]
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_1$x), max(toplot_1$x)) +
ylim(min(toplot_1$y), max(toplot_1$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_lower_p6m", num_vecs, ".png"))
toplot_2 <- as.data.table(p_toplot)
df_2 <- as.data.table(p_df)
ggplot(data = toplot_2, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_1$x), max(toplot_1$x)) +
ylim(min(toplot_1$y), max(toplot_1$y)) +
geom_segment(aes(x = df_2$x, y = df_2$y, xend = df_2$xend, yend = df_2$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_upper_p6m", num_vecs, ".png"))
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_1$x), max(toplot_1$x)) +
ylim(min(toplot_1$y), max(toplot_1$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
p_df
p_df$val
p_df$val[p_df$val < 5]
p_toplot
p_toplot <- p_toplot %>% mutate(across(val, as.double))
p_toplot <- p_toplot %>% mutate(across(val, as.double))
p_df <- p_df %>% mutate(across(val, as.double))
toplot_1 <- as.data.table(p_toplot)[val <= 5]
df_1 <- as.data.table(p_df)[val <= 5]
df_1
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_1$x), max(toplot_1$x)) +
ylim(min(toplot_1$y), max(toplot_1$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_lower_p6m", num_vecs, ".png"))
toplot_2 <- as.data.table(p_toplot)
df_2 <- as.data.table(p_df)
ggplot(data = toplot_2, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_1$x), max(toplot_1$x)) +
ylim(min(toplot_1$y), max(toplot_1$y)) +
geom_segment(aes(x = df_2$x, y = df_2$y, xend = df_2$xend, yend = df_2$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_upper_p6m", num_vecs, ".png"))
toplot_1 <- as.data.table(p_toplot)[val <= 5]
df_1 <- as.data.table(p_df)[val <= 5]
toplot_2 <- as.data.table(p_toplot)
df_2 <- as.data.table(p_df)
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
toplot_2
p_toplot <- p_toplot %>% mutate(across(val, as.double))
p_df <- p_df %>% mutate(across(val, as.double))
toplot_1 <- as.data.table(p_toplot)[val <= 5]
df_1 <- as.data.table(p_df)[val <= 5]
toplot_2 <- as.data.table(p_toplot)
df_2 <- as.data.table(p_df)
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_lower_p6m", num_vecs, ".png"))
ggplot(data = toplot_2, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_2$x, y = df_2$y, xend = df_2$xend, yend = df_2$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
p_toplot
p_toplot$val %>% unique()
floor(num_vecs/2)
toplot_1 <- as.data.table(p_toplot)[val <= floor(num_vecs/2)]
df_1 <- as.data.table(p_df)[val <= floor(num_vecs/2)]
toplot_2 <- as.data.table(p_toplot)
df_2 <- as.data.table(p_df)
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_lower_p6m", num_vecs, ".png"))
ggplot(data = toplot_2, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_2$x, y = df_2$y, xend = df_2$xend, yend = df_2$yend)) +
ggtitle(paste0("Parallel implementation 1 for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_upper_p6m", num_vecs, ".png"))
source("result_processing/rfuncs.R")
num_vecs <- 25
file_index <- 4
# ------------------------------------------------------------------------------
# SEQUENTIAL -------------------------------------------------------------------
sfiles <- list.files("outputs/seq/", full.names = TRUE)
snames <- sfiles %>% gsub("outputs/seq/", "", .) %>% gsub(".txt", "", .)
names(sfiles) <- snames
s_outputs <- readLines(sfiles[file_index])
s_ind1 <- which(grepl("Matrix A: ", s_outputs))+1
seq_results <- s_outputs[s_ind1:(s_ind1+(num_vecs-1))]
s_a1 <- initialPairs(seq_results)
s_clustering <- s_outputs[which(grepl("From ", s_outputs))]
s_x1 <- lapply(s_clustering, function(x_i) {
x_i %>% gsub("From ", "", .) %>% gsub(" and ", "\t", .) %>%
gsub(" to ", "\t", .) %>%
strsplit(., "\t") %>% unlist()
})
s_first_pair <- orderedPairFormatting(s_x1, 1) %>% add_column(type = "1")
s_second_pair <- orderedPairFormatting(s_x1, 2) %>% add_column(type = "1")
s_new_center <- orderedPairFormatting(s_x1, 3) %>% add_column(type = "2")
s_toplot <- bind_rows(s_first_pair, s_second_pair) %>% bind_rows(., s_new_center)
s_d1 <- s_toplot[s_toplot$type == 1,] %>% arrange(val) %>%
add_column(new_val = rep(c(0,1), nrow(s_toplot[s_toplot$type == 1,])/2))
s_d2a <- s_d1[s_d1$new_val == 0,c("val","x","y","type")]
s_d2b <- s_d1[s_d1$new_val == 1,c("val","x","y","type")] %>%
set_colnames(c("val","xend","yend","type"))
s_d2 <- inner_join(s_d2a, s_d2b, by = c("val","type"))
s_df <- bind_rows(s_d2, s_d2) %>% bind_rows(s_d2)
s_toplot$type[s_toplot$type == "1"] <- "Merged pair"
s_toplot$type[s_toplot$type == "2"] <- "Center"
# s_plot <- ggplot(data = s_toplot, aes(x = x, y = y, color = type)) + geom_point() +
#   geom_segment(aes(x = s_df$x, y = s_df$y, xend = s_df$xend, yend = s_df$yend)) +
#   ggtitle(paste0("Sequential implementation 1 for ", num_vecs, " vectors and N = 2")) +
#   labs(color = "Point type")
# s_plot
# ggsave(paste0("sequential_plot.png"))
s_toplot <- s_toplot %>% mutate(across(val, as.double))
s_df <- s_df %>% mutate(across(val, as.double))
toplot_1 <- as.data.table(s_toplot)[val <= floor(num_vecs/2)]
df_1 <- as.data.table(s_df)[val <= floor(num_vecs/2)]
toplot_2 <- as.data.table(s_toplot)
df_2 <- as.data.table(s_df)
ggplot(data = toplot_1, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_1$x, y = df_1$y, xend = df_1$xend, yend = df_1$yend)) +
ggtitle(paste0("Naive sequential implementation for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_lower_p1m", num_vecs, ".png"))
ggplot(data = toplot_2, aes(x = x, y = y, color = type)) + geom_point() +
xlim(min(toplot_2$x), max(toplot_2$x)) +
ylim(min(toplot_2$y), max(toplot_2$y)) +
geom_segment(aes(x = df_2$x, y = df_2$y, xend = df_2$xend, yend = df_2$yend)) +
ggtitle(paste0("Naive sequential implementation for ", num_vecs, " vectors and N = 2")) +
labs(color = "Point type")
ggsave(paste0("levels_upper_p1m", num_vecs, ".png"))
s_toplot
s_a1
ggplot(s_a1)
ggplot(s_a1) + geom_point()
ggplot(s_a1, aes(x, y)) + geom_point()
median(sort(s_a1$x))
mean(s_a1$x)
s_a1
s_a1$color <- 0
mx <- mean(s_a1$x)
my <- mean(s_a1$y)
for (i in 1:nrow(s_a1)) {
if (s_a1$x[i] <= mx & s_a1$y[i] < my) {
s_a1$color[i] <- 1
}
}
s_a1$color <- "a"
mx <- mean(s_a1$x)
my <- mean(s_a1$y)
for (i in 1:nrow(s_a1)) {
if (s_a1$x[i] <= mx & s_a1$y[i] < my) {
s_a1$color[i] <- "b"
}
}
ggplot(s_a1, aes(x, y, color = color)) + geom_point()
s_a1$color <- "a"
mx <- mean(s_a1$x)
my <- mean(s_a1$y)
for (i in 1:nrow(s_a1)) {
if (s_a1$x[i] <= mx & s_a1$y[i] <= my) {
s_a1$color[i] <- "b"
}else if (s_a1$x[i] <= mx & s_a1$y[i] > my) {
s_a1$color[i] <- "c"
}else if (s_a1$x[i] > mx & s_a1$y[i] > my) {
s_a1$color[i] <- "d"
}
}
ggplot(s_a1, aes(x, y, color = color)) + geom_point()
