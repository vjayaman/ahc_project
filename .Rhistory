getwd()
list.files("documentation/")
list.files("documentation/", recursive = TRUE)
list.files("documentation/", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
set.seed(10111)
x <- matrix(rnorm(40), 20, 2)
y <- rep(c(-1, 1), c(10, 10))
x[y == 1,] <- x[y == 1,] + 1
plot(x, col = y + 3, pch = 19)
library(e1071)
dat <- data.frame(x, y = as.factor(y))
svmfit <- svm(y ~ ., data = dat, kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
make.grid <- function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(X1 = x1, X2 = x2)
}
xgrid = make.grid(x)
xgrid[1:10,]
library(bioseq)
install.packages("bioseq")
library(bioseq)
install.packages("seqinr")
library(seqinr)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(tidyverse)
library(e1071)
library(ggplot2)
# library(caret) # this package is useful for a few different types of classification algorithms
data(iris)
ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(color = Species)) +
ggtitle(paste0("Iris species for ", nrow(iris), " samples, petal length by width"))
classes <- c("setosa", "versicolor")
lin_sep <- iris %>%
filter(Species %in% classes) %>%
select(Petal.Length, Petal.Width, Species)
lin_sep$Species <- factor(lin_sep$Species, levels = classes)
sample_indices <- sample(2, nrow(lin_sep), replace = TRUE, prob = c(0.8,0.2))
table(sample_indices)
training_linsep <- lin_sep[sample_indices == 1,]
test_linsep <- lin_sep[sample_indices == 2,]
ggplot(training_linsep, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(color = Species)) +
ggtitle(paste0("Linearly separable iris training data (",
nrow(training_linsep), " samples), petal length by width"))
svm_model <- svm(Species ~ ., data = training_linsep, kernel = "linear", cost = 10, scale = FALSE)
print(svm_model)
plot(svm_model, training_linsep, dataSymbol = 1, col = c("#8DD3C7","#FFFFB3"))
summary(svm_model)
svm_model <- svm(Species ~ ., data = training_linsep, kernel = "linear", cost = 0.5, scale = FALSE)
plot(svm_model, training_linsep, dataSymbol = 1, col = c("#8DD3C7","#FFFFB3"))
summary(svm_model)
tune_svm = tune(method = svm, Species ~ .,
data = training_linsep, kernel = "linear",
ranges = list(cost = 10^(-1:2)))
summary(tune_svm$best.model)
test_classes <- predict(tune_svm$best.model, test_linsep)
table(predicted = test_classes, actual = test_linsep$Species)
classes <- c("versicolor", "virginica")
nonlin_sep <- iris %>%
filter(Species %in% classes) %>%
select(Petal.Length, Petal.Width, Species)
nonlin_sep$Species <- factor(nonlin_sep$Species, levels = classes)
training_nonlin <- nonlin_sep[sample_indices == 1,]
test_nonlin <- nonlin_sep[sample_indices == 2,]
ggplot(training_nonlin, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(color = Species)) +
ggtitle(paste0("Non-linearly separable iris training data (",
nrow(training_nonlin), " samples), petal length by width"))
svm_model <- svm(Species ~ ., data = training_nonlin, kernel = "radial", cost = 5, gamma = 1, scale = FALSE)
plot(svm_model, training_nonlin, dataSymbol = 1, col = c("#8DD3C7","#FFFFB3"))
set.seed(10)
tune_svm = tune(method = svm, Species ~ .,
data = training_nonlin, kernel = "radial",
ranges = list(cost = c(0.001, 0.01, 0.1, 1,5,10,100),
gamma = seq(0.5, 5, 0.5)))
summary(tune_svm$best.model)
plot(tune_svm$best.model, training_nonlin, dataSymbol = 1, col = c("#8DD3C7","#FFFFB3"))
table(predicted = predict(tune_svm$best.model, newdata = test_nonlin),
actual = test_nonlin$Species)
multi_class <- iris %>% select(Petal.Length, Petal.Width, Species)
multi_class$Species <- factor(multi_class$Species, levels = unique(multi_class$Species))
training_multi <- multi_class[sample_indices == 1,]
test_multi <- multi_class[sample_indices == 2,]
ggplot(training_multi, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(color = Species)) +
ggtitle(paste0("Multiple class iris training data (",
nrow(training_multi), " samples), petal length by width"))
svm_model <- svm(Species ~ ., data = training_multi, kernel = "radial", cost = 5, gamma = 1, scale = FALSE)
plot(svm_model, training_multi, dataSymbol = 1, col = c("#8DD3C7","#FFFFB3", "#FB8072"))
table(predicted = predict(tune_svm$best.model, newdata = test_multi),
actual = test_multi$Species)
svm_model$index
svm_model$rho
svm_model$compprob
svm_model$probA
svm_model$probB
svm_model$sigma
svm_model$coefs
svm_model$na.action
svm_model$fitted
head(svm_model$decision.values)
svm_model$terms
# library(e1071)
# library(rgl)
# library(misc3d)
#
# dat <- iris_training %>% mutate(group = ifelse(Species == "virginica", 1, 2)) %>%
#   mutate(across(group, as.factor)) %>% select(group, Petal.Length, Petal.Width)
#
# test_dat <- iris_test %>% mutate(group = ifelse(Species == "virginica", 1, 2)) %>%
#   mutate(across(group, as.factor)) %>% select(group, Petal.Length, Petal.Width)
#
# tune_svm = tune(method = svm,
#                 Species ~ .,
#                 data = iris_training,
#                 kernel = "radial",
#                 ranges = list(cost = c(0.001, 0.01, 0.1, 1,5,10,100),
#                               gamma = c(0.5, 1, 2, 3, 4)))
#
# test_results <- data.frame(Petal.Width = iris_test$Petal.Width,
#                            Petal.Length = iris_test$Petal.Length,
#                            Actual = iris_test$Species,
#                            Species = predict(tune_svm$best.model,
#                                              newdata = iris_test[,c("Petal.Length","Petal.Width")])) %>%
#   mutate(group = ifelse(Species == "virginica", 1, 2)) %>%
#   mutate(group = ifelse(Species == Actual, Species, 4)) %>%
#   mutate(across(group, as.factor)) #%>% select(group, Petal.Length, Petal.Width)
#
# plot3d(x = dat$Petal.Width, y = dat$Petal.Length, col = dat$group,
#        xlab = "Petal.Width", ylab = "Petal.Length")
#
# plot3d(x = test_results$Petal.Width, y = test_results$Petal.Length, col = test_results$group,
#        xlab = "Petal.Width", ylab = "Petal.Length", add = TRUE)
# non_linear <- iris %>% filter(Species %in% c("versicolor", "virginica"))
# non_linear$Species <- factor(non_linear$Species, levels = c("versicolor", "virginica"))
# ggplot(non_linear, aes(x = Sepal.Width, y = Sepal.Length)) +
#   geom_point(aes(color = Species)) +
#   ggtitle("Iris species, sepal length by width")
library(ggplot2)
q1_pc <- data.frame(n = c(50000, 20000, 15000, 10000, 7500, 5000, 3000, 1000,
500, 250, 200, 100, 50, 10),
time = c(0.007046, 0.004449, 0.003576, 0.002477, 0.001979,
0.001953, 0.000914, 0.000756, 0.000595, 0.000553,
0.000510, 0.000522, 0.000519, 0.000448))
ggplot(q1_pc, x = n, y = time) + geom_point()
ggplot(q1_pc, aes(x = n, y = time)) + geom_point()
ggplot(q1_pc, aes(x = n, y = time)) + geom_point() +
ggtitle(paste0("Winning times (seconds), with q = 7 (fixed), N varied from 10 to 50000"))
ggplot(q1_pc, aes(x = n, y = time)) + geom_point() +
xlab("N") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with q = 7 (fixed), N varied from 10 to 50000"))
# part d
n = 2000 # fixed
q1_pd <- data.frame(q = c(31, 27, 23, 19, 15, 11, 7),
time = c(0.001437, 0.001494, 0.001205, 0.001305, 0.001250,
0.001226, 0.000832))
ggplot(q1_pd, aes(x = q, y = time)) + geom_point() +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N = ", n, " (fixed), q varied (7 values from 7 to 31)"))
# Question 4
q4 <- data.frame(n = c(10, 30, 50, 100, 300, 500, 1000, 3000, 5000, 10000,
30000, 50000, 75000, 100000, 125000, 150000, 175000, 200000),
val = c(0.40000000, 1.73333333, 2.64000000, 2.64000000,
2.93333333, 3.04000000, 3.09200000, 3.10933333,
3.18240000, 3.18080000, 3.14586667, 3.14568000,
3.14192000, 3.14780000, 3.14732800, 3.14069333,
3.14052571, 3.14112000),
time = c(0.007238, 0.010000, 0.007200, 0.008974,
0.015805, 0.009011, 0.009501, 0.015453,
0.022269, 0.032608, 0.064775, 0.105450,
0.128504, 0.175335, 0.203483, 0.285345,
0.265365, 0.322050))
ggplot(q4, aes(x = n, y = time)) + geom_point(aes(color = val)) +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N = ", n, " (fixed), q varied (7 values from 7 to 31)"))
# Question 4
pi_approx <- c(0.40000000, 1.73333333, 2.64000000, 2.64000000,
2.93333333, 3.04000000, 3.09200000, 3.10933333,
3.18240000, 3.18080000, 3.14586667, 3.14568000,
3.14192000, 3.14780000, 3.14732800, 3.14069333,
3.14052571, 3.14112000)
pi
pi - pi_approx
abs(pi - pi_approx)
# Question 4
pi_approx <- c(0.40000000, 1.73333333, 2.64000000, 2.64000000,
2.93333333, 3.04000000, 3.09200000, 3.10933333,
3.18240000, 3.18080000, 3.14586667, 3.14568000,
3.14192000, 3.14780000, 3.14732800, 3.14069333,
3.14052571, 3.14112000)
q4 <- data.frame(n = c(10, 30, 50, 100, 300, 500, 1000, 3000, 5000, 10000,
30000, 50000, 75000, 100000, 125000, 150000, 175000, 200000),
Absolute_distance_from_pi = abs(pi - pi_approx),
time = c(0.007238, 0.010000, 0.007200, 0.008974,
0.015805, 0.009011, 0.009501, 0.015453,
0.022269, 0.032608, 0.064775, 0.105450,
0.128504, 0.175335, 0.203483, 0.285345,
0.265365, 0.322050))
ggplot(q4, aes(x = n, y = time)) + geom_point(aes(color = Absolute_distance_from_pi)) +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N = ", n, " (fixed), q varied (7 values from 7 to 31)"))
ggplot(q4, aes(x = n, y = time)) + geom_point(aes(color = Absolute_distance_from_pi)) +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N varied (and q = 16 fixed)"))
library(ggplot2)
# Question 1
# part c
q = 7 # fixed
q1_pc <- data.frame(n = c(50000, 20000, 15000, 10000, 7500, 5000, 3000, 1000,
500, 250, 200, 100, 50, 10),
time = c(0.007046, 0.004449, 0.003576, 0.002477, 0.001979,
0.001953, 0.000914, 0.000756, 0.000595, 0.000553,
0.000510, 0.000522, 0.000519, 0.000448))
ggplot(q1_pc, aes(x = n, y = time)) + geom_point() +
xlab("N") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with q = ", q, " (fixed), N varied from 10 to 50000"))
# part d
n = 2000 # fixed
q1_pd <- data.frame(q = c(31, 27, 23, 19, 15, 11, 7),
time = c(0.001437, 0.001494, 0.001205, 0.001305, 0.001250,
0.001226, 0.000832))
ggplot(q1_pd, aes(x = q, y = time)) + geom_point() +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N = ", n, " (fixed), q varied (7 values from 7 to 31)"))
# Question 4
pi_approx <- c(0.40000000, 1.73333333, 2.64000000, 2.64000000,
2.93333333, 3.04000000, 3.09200000, 3.10933333,
3.18240000, 3.18080000, 3.14586667, 3.14568000,
3.14192000, 3.14780000, 3.14732800, 3.14069333,
3.14052571, 3.14112000)
q4 <- data.frame(n = c(10, 30, 50, 100, 300, 500, 1000, 3000, 5000, 10000,
30000, 50000, 75000, 100000, 125000, 150000, 175000, 200000),
Absolute_distance_from_pi = abs(pi - pi_approx),
time = c(0.007238, 0.010000, 0.007200, 0.008974,
0.015805, 0.009011, 0.009501, 0.015453,
0.022269, 0.032608, 0.064775, 0.105450,
0.128504, 0.175335, 0.203483, 0.285345,
0.265365, 0.322050))
ggplot(q4, aes(x = n, y = time)) + geom_point(aes(color = Absolute_distance_from_pi)) +
xlab("q") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with N varied (and q = 16 fixed)"))
library(ggplot2)
# Question 1
# part c
q = 7 # fixed
q1_pc <- data.frame(n = c(#50000,
20000, 15000, 10000, 7500, 5000, 3000, 1000,
500, 250, 200, 100, 50, 10),
time = c(#0.007046,
0.004449, 0.003576, 0.002477, 0.001979,
0.001953, 0.000914, 0.000756, 0.000595, 0.000553,
0.000510, 0.000522, 0.000519, 0.000448))
ggplot(q1_pc, aes(x = n, y = time)) + geom_point() +
xlab("N") + ylab("Execution time (seconds)") +
ggtitle(paste0("Winning times (seconds), with q = ", q, " (fixed), N varied from 10 to 50000"))
getwd()
setwd("C:/Users/vasen/Documents/MSc courses/7850-APC/ProjectNotes/ahc_project")
shiny::runApp()
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "num_vecs",
"Number of vectors",
c("0005", "0010", "0015", "0025", "0050", "0075", "0100", "0250", "0500", "0750", "1000", "1500", "2000", "3000"),
selected = 1, multiple = FALSE),
tabsetPanel(
"Plotting",
tabPanel("Fix n and vary p"),
tabPanel("Fix p and vary n"),
"Tables",
tabPanel("General computation times"),
tabPanel("Efficiency")
)
),
dashboardBody(
fluidRow(
box(plotOutput("parallel_plot_halfway", height = 350)),
box(plotOutput("parallel_plot", height = 350))
),
fluidRow(
box(plotOutput("seq_plot_halfway", height = 350)),
box(plotOutput("seq_plot", height = 350))
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# setwd("C:/Users/vasen/Documents/MSc courses/7850-APC/ProjectNotes/ahc_project")
library(magrittr)
library(tidyverse)
library(fastcluster)
library(data.table)
library(xtable)
# # PARALLEL: fix p vary n -----------------------------------------------------
# fix p vary n
pfiles <- list.files("outputs/parallel/", full.names = TRUE)
pnames <- pfiles %>% gsub("outputs/parallel/", "", .) %>% gsub(".txt", "", .)
names(pfiles) <- pnames
parallel_times <- lapply(pfiles, function(x) {
p_outputs <- readLines(x)
p_ind1 <- which(grepl("Total time", p_outputs))
if (length(p_ind1) > 0) {
y <- strsplit(x, "/")[[1]][3] %>% gsub(".txt", "", .) %>%
strsplit(names(x), split = "m") %>% unlist() %>% gsub("p", "", .) %>%
as.double()
z <- strsplit(p_outputs[p_ind1], " ")[[1]][4] %>% as.double()
data.frame(t(y), z) %>% set_colnames(c("num_nodes", "num_vecs", "time"))
}
}) %>% bind_rows()
# # NAIVE SEQUENTIAL -------------------------------------------------------------
sfiles <- list.files("outputs/seq/", full.names = TRUE)
naive_sequential_times <- lapply(sfiles, function(x) {
s_outputs <- readLines(x)
s_ind1 <- which(grepl("Total time", s_outputs))
y <- strsplit(x, "/")[[1]][3] %>% gsub(".txt", "", .) %>%
strsplit(names(x), split = "m") %>% unlist() %>% extract2(2)
z <- strsplit(s_outputs[s_ind1], " ")[[1]][4] %>% as.double()
data.frame(num_nodes = 0, num_vecs = as.double(y), time = z)
}) %>% bind_rows()
# SEQUENTIAL -------------------------------------------------------------------
num_vec_list <- lapply(sfiles, function(sf) {
strsplit(sf, "/")[[1]][3] %>% gsub(".txt", "", .) %>% gsub("m", "", .) %>% as.double()
}) %>% unlist()
sequential_times <- lapply(1:length(num_vec_list), function(i) {
file_index <- i
num_vecs <- num_vec_list[i]
start_time <- Sys.time()
sfiles <- list.files("outputs/seq/", full.names = TRUE)
snames <- sfiles %>% gsub("outputs/seq/", "", .) %>% gsub(".txt", "", .)
names(sfiles) <- snames
s_outputs <- readLines(sfiles[file_index])
s_ind1 <- which(grepl("Matrix A: ", s_outputs))+1
seq_results <- s_outputs[s_ind1:(s_ind1+(num_vecs-1))]
s_a1 <- lapply(seq_results, function(x) {
strsplit(x, "\t") %>% unlist() %>% as.double()
}) %>% as.data.frame() %>% t() %>% as.data.frame() %>%
as_tibble() %>% set_colnames(c("x", "y"))
df <- stats::dist(s_a1)
hc <- fastcluster::hclust(df, members = "ave") # plot(hc) # plot(hc, hang = -1)
end_time <- Sys.time() - start_time
df <- data.frame(num_nodes = 1, num_vecs,
time = as.character(end_time) %>% as.double())
}) %>% bind_rows()
pt <- parallel_times %>% select(2,3) %>%
set_colnames(c("# vectors", "Parallel (sec)"))
nst <- naive_sequential_times %>% select(2,3) %>%
set_colnames(c("# vectors", "Naive seq. (sec)"))
st <- sequential_times %>% select(2,3) %>%
set_colnames(c("# vectors", "Best seq. (sec)"))
times <- merge.data.table(pt, nst, by = "# vectors") %>%
merge.data.table(., st, by = "# vectors") %>%
mutate(Speedup = `Best seq. (sec)` / `Parallel (sec)`,
`Cost Optimality` = `Best seq. (sec)` / (unique(parallel_times$num_nodes) * `Parallel (sec)`))
print(xtable(x = times, type = "latex", file = "figs_and_tbls/time_fixp_varyn.tex",
digits = c(1,0,3,3,3,3,3)),
include.rownames = FALSE)
parallel_times
sequential_times
times <- merge.data.table(pt, nst, by = "# vectors") %>%
merge.data.table(., st, by = "# vectors") %>%
mutate(Speedup = `Best seq. (sec)` / `Parallel (sec)`,
`Cost Optimality` = `Best seq. (sec)` / (unique(parallel_times$num_nodes) * `Parallel (sec)`))
times
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
parallel_times
runApp()
runApp()
runApp()
runApp()
# setwd("C:/Users/vasen/Documents/MSc courses/7850-APC/ProjectNotes/ahc_project")
library(magrittr)
library(tidyverse)
library(fastcluster)
library(data.table)
library(xtable)
# # PARALLEL: fix n vary p -----------------------------------------------------
pfiles <- list.files("outputs/fix_n_vary_p/parallel/", full.names = TRUE)
pnames <- pfiles %>% gsub("outputs/fix_n_vary_p/parallel/", "", .) %>% gsub(".txt", "", .)
names(pfiles) <- pnames
parallelFixNVaryP <- function(pfiles, m_val) {
pfiles <- grep(m_val, pfiles, value = TRUE)
parallel_times <- lapply(1:length(pfiles), function(i) {
x <- pfiles[i]
p_outputs <- readLines(x)
p_ind1 <- which(grepl("Total time", p_outputs))
if (length(p_ind1) > 0) {
y <- strsplit(names(x), split = "m") %>% unlist() %>% gsub("p", "", .) %>% as.double()
z <- strsplit(p_outputs[p_ind1], " ")[[1]][4] %>% as.double()
data.frame(t(y), z) %>% set_colnames(c("num_nodes", "num_vecs", "time"))
}
}) %>% bind_rows()
return(parallel_times)
}
# fix n = 15 vary p
# fix n = 60 vary p
# fix n = 300 vary p
parallel_times <- parallelFixNVaryP(pfiles, "m015") %>%
bind_rows(., parallelFixNVaryP(pfiles, "m060")) %>%
bind_rows(., parallelFixNVaryP(pfiles, "m300")) %>% as.data.table()
parallel_times
# fix n = 15 vary p
# fix n = 60 vary p
# fix n = 300 vary p
parallel_times <- parallelFixNVaryP(pfiles, "m015") %>%
bind_rows(., parallelFixNVaryP(pfiles, "m060")) %>%
bind_rows(., parallelFixNVaryP(pfiles, "m300")) %>% as.data.table()
sfiles <- list.files("outputs/fix_n_vary_p/seq/", full.names = TRUE, pattern = ".txt")
snames <- sfiles %>% gsub("outputs/fix_n_vary_p/seq/", "", .) %>% gsub(".txt", "", .)
names(sfiles) <- snames
seqFixNVaryP <- function(sfiles, m_val) {
sfiles <- grep(m_val, sfiles, value = TRUE)
naive_sequential_times <- lapply(1:length(sfiles), function(i) {
x <- sfiles[i]
s_outputs <- readLines(x)
s_ind1 <- which(grepl("Total time", s_outputs))
y <- strsplit(names(x), split = "m") %>% unlist() %>% gsub("p", "", .) %>% as.double()
z <- strsplit(s_outputs[s_ind1], " ")[[1]][4] %>% as.double()
data.frame(num_nodes = y[1], num_vecs = y[2], time = z)
}) %>% bind_rows()
return(naive_sequential_times)
}
naive_sequential_times <- seqFixNVaryP(sfiles, "m015") %>%
bind_rows(., seqFixNVaryP(sfiles, "m060")) %>%
bind_rows(., seqFixNVaryP(sfiles, "m300")) %>% as.data.table()
num_vec_list <- c(15, 60, 300)
sequential_times <- lapply(1:length(num_vec_list), function(i) {
file_index <- i
num_vecs <- num_vec_list[i]
start_time <- Sys.time()
sfiles <- list.files("outputs/fix_n_vary_p/seq/", full.names = TRUE, pattern = ".txt")
snames <- sfiles %>% gsub("outputs/fix_n_vary_p/seq/", "", .) %>% gsub(".txt", "", .)
names(sfiles) <- snames
s_outputs <- readLines(sfiles[grep(as.character(num_vecs), snames)])
s_ind1 <- which(grepl("Matrix A: ", s_outputs))+1
seq_results <- s_outputs[s_ind1:(s_ind1+(num_vecs-1))]
s_a1 <- lapply(seq_results, function(x) {
strsplit(x, "\t") %>% unlist() %>% as.double()
}) %>% as.data.frame() %>% t() %>% as.data.frame() %>%
as_tibble() %>% set_colnames(c("x", "y"))
df <- stats::dist(s_a1)
hc <- fastcluster::hclust(df, members = "ave") # plot(hc); plot(hc, hang = -1)
end_time <- Sys.time() - start_time
data.frame(num_nodes = 1, num_vecs, time = as.character(end_time) %>% as.double())
}) %>% bind_rows() %>% as.data.table()
# RUNNING ----------------------------------------------------------------------
# fix n = 15, vary p
nv <- 15
# a1 <- sequential_times[num_vecs == nv] %>% add_column(type = "Best seq.")
a1 <- sequential_times[num_vecs == nv] %>%
set_colnames(c("seq p", "# vectors", "Best seq."))
a2 <- naive_sequential_times[num_vecs == nv] %>%
set_colnames(c("seq p", "# vectors", "General seq. (mine)"))
a3 <- parallel_times[num_vecs == nv] %>%
set_colnames(c("parallel p", "# vectors", "Parallel (mine)"))
n15 <- merge.data.table(a1, a2, by = c("seq p", "# vectors")) %>%
merge.data.table(., a3, by = "# vectors") %>%
mutate(Speedup = `Best seq.` / `Parallel (mine)`)
# n15 <- bind_rows(a1, a2) %>% bind_rows(., a3) %>%
#   set_colnames(c("Number of processes", "Number of vectors", "Time (sec)", "Implementation"))
print(xtable(x = n15, type = "latex", digits = c(0,0,0,5,5,0,5,5)), include.rownames = FALSE)
n15
shiny::runApp()
source("result_processing/tmp.R")
nv <- 15
# a1 <- sequential_times[num_vecs == nv] %>% add_column(type = "Best seq.")
a1 <- sequential_times[num_vecs == nv] %>%
set_colnames(c("seq p", "# vectors", "Best seq."))
a2 <- naive_sequential_times[num_vecs == nv] %>%
set_colnames(c("seq p", "# vectors", "General seq. (mine)"))
a3 <- parallel_times[num_vecs == nv] %>%
set_colnames(c("parallel p", "# vectors", "Parallel (mine)"))
n15 <- merge.data.table(a1, a2, by = c("seq p", "# vectors")) %>%
merge.data.table(., a3, by = "# vectors") %>%
mutate(Speedup = `Best seq.` / `Parallel (mine)`)
n15
pt <- dfs$par %>% select(2,3) %>%
set_colnames(c("# vectors", "Parallel (sec)"))
nst <- dfs$nst %>% select(2,3) %>%
set_colnames(c("# vectors", "Naive seq. (sec)"))
st <- dfs$st %>% select(2,3) %>%
set_colnames(c("# vectors", "Best seq. (sec)"))
runApp()
runApp()
a <- readRDS(dfs)
a <- readRDS("result_processing/dfs.Rds")
a
a$nst
reactive(a$nst)
reactive({a$nst})
runApp()
runApp()
runApp()
runApp()
runApp()
